class HeaderComponent extends HTMLElement {
    constructor() {
        super();
        this.activeUsers = 0;
        // 1. –ß–∏—Ç–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
        this.isAccessibilityMode = localStorage.getItem('accessibilityMode') === 'true';
        
        this.attachShadow({ mode: 'open' });
        
        // setupUserCounter –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –∑–¥–µ—Å—å, –µ—Å–ª–∏ –æ–Ω –Ω–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç DOM, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –ø–æ–∑–∂–µ
        this.setupUserCounter(); 
    }

    startClock() {
        this.updateClock();
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞, —á—Ç–æ–±—ã –µ–≥–æ –º–æ–∂–Ω–æ –±—ã–ª–æ –æ—á–∏—Å—Ç–∏—Ç—å
        this.clockIntervalId = setInterval(() => this.updateClock(), 1000);
    }

    updateClock() {
        const now = new Date();
        const hours = String(now.getHours()).padStart(2, '0');
        const minutes = String(now.getMinutes()).padStart(2, '0');
        const clockElement = this.shadowRoot.querySelector('.clock');
        if (clockElement) {
            clockElement.textContent = `${hours}:${minutes}`;
        }
    }

    getBasePath() {
        const path = window.location.pathname;
        return path.includes('/pages/') ? '../' : './';
    }

    connectedCallback() {
        const basePath = this.getBasePath();
        
        // 2. –†–µ–Ω–¥–µ—Ä–∏–º HTML. –ê—Ç—Ä–∏–±—É—Ç aria-pressed –Ω–∞ –∫–Ω–æ–ø–∫–µ –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ this.isAccessibilityMode
        this.shadowRoot.innerHTML = `
            <style>
                :host {
                    --header-bg-color: #4CAF50;
                    --header-text-color: white;
                    --header-accent-color: #2c5c85;
                    --header-accent-text-color: white;
                    --header-hover-bg-color: rgba(255, 255, 255, 0.1);
                    display: block;
                }
                /* ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤–∞—à–∏ —Å—Ç–∏–ª–∏ –≤–Ω—É—Ç—Ä–∏ <style> –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ... */
                .header {
                    position: fixed;
                    top: 0;
                    left: 0;
                    right: 0;
                    height: 60px;
                    background-color: var(--header-bg-color); 
                    display: flex;
                    align-items: center;
                    justify-content: space-between;
                    padding: 0 2rem;
                    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
                    z-index: 1000;
                    transition: background-color 0.3s ease, color 0.3s ease; 
                }

                .logo-container {
                    display: flex;
                    align-items: center;
                    gap: 2rem;
                }

                .accessibility-controls {
                    display: flex;
                    align-items: center;
                    gap: 1rem;
                }

                .clock {
                    font-size: 1.2rem;
                    font-weight: bold;
                    color: var(--header-text-color); 
                    padding: 0.5rem 1rem;
                    background-color: rgba(0, 0, 0, 0.1); 
                    border-radius: 4px;
                }

                .accessibility-toggle {
                    background: none;
                    border: 1px solid transparent;
                    color: var(--header-text-color); 
                    font-size: 1.5rem;
                    padding: 0.5rem;
                    cursor: pointer;
                    border-radius: 4px;
                    transition: all 0.3s ease;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                }
                
                .accessibility-toggle[aria-pressed="true"] {
                    background-color: var(--header-text-color); 
                    color: var(--header-bg-color); 
                    border: 1px solid var(--header-bg-color);
                }

                .accessibility-toggle:hover {
                    background-color: var(--header-hover-bg-color); 
                }
                
                .accessibility-toggle[aria-pressed="true"]:hover {
                    opacity: 0.8; 
                }

                .logo {
                    display: flex;
                    align-items: center;
                    gap: 1rem;
                    text-decoration: none;
                    padding: 0.5rem;
                    border-radius: 8px;
                    transition: background-color 0.2s ease;
                }

                .logo:hover {
                    background-color: var(--header-hover-bg-color);
                }

                .logo-image {
                    width: 40px;
                    height: 40px;
                    object-fit: contain;
                }

                .logo-text {
                    color: var(--header-text-color); 
                    font-size: 1.5rem;
                    font-weight: bold;
                    white-space: nowrap;
                }

                .nav {
                    display: flex;
                    gap: 2rem;
                }

                .nav-link {
                    color: var(--header-text-color); 
                    text-decoration: none;
                    display: inline-flex;
                    align-items: center;
                    gap: 0.5rem;
                    padding: 0.5rem 1rem;
                    border-radius: 4px;
                    transition: background-color 0.2s ease;
                    line-height: 1;
                }

                .nav-link .icon {
                    display: inline-flex;
                    align-items: center;
                    justify-content: center;
                    font-size: 1.2em;
                    line-height: 1;
                }

                .nav-link:hover,
                .nav-link.active { 
                    background-color: var(--header-hover-bg-color);
                }

                .user-actions {
                    display: flex;
                    align-items: center;
                    gap: 1rem;
                }

                .user-count {
                    background-color: var(--header-accent-color); 
                    color: var(--header-accent-text-color); 
                    padding: 0.25rem 0.75rem;
                    border-radius: 1rem;
                    font-size: 0.9rem;
                    font-weight: bold;
                    min-width: 2rem;
                    text-align: center;
                    display: inline-flex;
                    align-items: center;
                    justify-content: center;
                }

                .user-count::before {
                    content: 'üë•';
                    margin-right: 0.5rem;
                    line-height: 1;
                }

                .add-recipe-btn {
                    background-color: var(--header-accent-color); 
                    color: var(--header-accent-text-color); 
                    border: none;
                    padding: 0.5rem 1rem;
                    border-radius: 4px;
                    cursor: pointer;
                    transition: background-color 0.2s ease;
                    display: inline-flex;
                    align-items: center;
                    line-height: 1;
                }

                .add-recipe-btn:hover {
                    filter: brightness(110%);
                }

                @media (max-width: 768px) {
                    .logo-text {
                        font-size: 1.2rem;
                    }
                    
                    .logo-image {
                        width: 32px;
                        height: 32px;
                    }

                    .nav {
                        gap: 1rem;
                    }

                    .nav-link {
                        padding: 0.5rem;
                    }
                }
            </style>
            <header class="header">
                <div class="logo-container">
                    <a href="${basePath}index.html" class="logo">
                        <img src="${basePath}assets/images/logo.svg" alt="–õ–æ–≥–æ—Ç–∏–ø" class="logo-image">
                        <span class="logo-text">Cook's Manuscript</span>
                    </a>
                    <div class="accessibility-controls">
                        <div class="clock"></div>
                        <button 
                            class="accessibility-toggle" 
                            aria-pressed="${this.isAccessibilityMode.toString()}" 
                            aria-label="–†–µ–∂–∏–º –¥–ª—è –ª—é–¥–µ–π —Å –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—è–º–∏ –∑—Ä–µ–Ω–∏—è"
                            title="–†–µ–∂–∏–º –¥–ª—è –ª—é–¥–µ–π —Å –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—è–º–∏ –∑—Ä–µ–Ω–∏—è"
                        ><span>üëÅÔ∏è</span></button>
                    </div>
                </div>
                <nav class="nav">
                    <a href="${basePath}index.html" class="nav-link">
                        <span class="icon">üè†</span>
                        <span>–ì–ª–∞–≤–Ω–∞—è</span>
                    </a>
                    <a href="${basePath}pages/catalog.html" class="nav-link">
                        <span class="icon">üìö</span>
                        <span>–ö–∞—Ç–∞–ª–æ–≥</span>
                    </a>
                    <a href="${basePath}pages/about.html" class="nav-link">
                        <span class="icon">‚ÑπÔ∏è</span>
                        <span>–û –Ω–∞—Å</span>
                    </a>
                    <a href="${basePath}pages/favorite.html" class="nav-link">
                        <span class="icon">‚ù§Ô∏è</span>
                        <span>–ò–∑–±—Ä–∞–Ω–Ω–æ–µ</span>
                    </a>
                </nav>
                <div class="user-actions">
                    <span class="user-count">${this.activeUsers}</span>
                    <button class="add-recipe-btn">
                        <span class="icon">üìù</span>
                        –î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–π —Ä–µ—Ü–µ–ø—Ç
                    </button>
                </div>
            </header>
        `;

        // 3. –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–ª–∞—Å—Å 'accessibility-mode' –∫ <html>, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if (this.isAccessibilityMode) {
            document.documentElement.classList.add('accessibility-mode');
        } else {
            // –í–∞–∂–Ω–æ —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –∫–ª–∞—Å—Å —Å–Ω—è—Ç, –µ—Å–ª–∏ —Ä–µ–∂–∏–º –≤—ã–∫–ª—é—á–µ–Ω (–Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω —Ä–∞–Ω–µ–µ)
            document.documentElement.classList.remove('accessibility-mode');
        }

        this.startClock();
        this.setupEventListeners();
    }

    setupEventListeners() {
        const accessibilityToggle = this.shadowRoot.querySelector('.accessibility-toggle');
        if (accessibilityToggle) {
            accessibilityToggle.addEventListener('click', () => {
                this.isAccessibilityMode = !this.isAccessibilityMode;
                // –û–±–Ω–æ–≤–ª—è–µ–º aria-pressed –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç–µ
                accessibilityToggle.setAttribute('aria-pressed', this.isAccessibilityMode.toString()); 
                
                if (this.isAccessibilityMode) {
                    document.documentElement.classList.add('accessibility-mode');
                } else {
                    document.documentElement.classList.remove('accessibility-mode');
                }
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
                localStorage.setItem('accessibilityMode', this.isAccessibilityMode.toString());
            });
        }

        const addRecipeBtn = this.shadowRoot.querySelector('.add-recipe-btn');
        if (addRecipeBtn) {
            addRecipeBtn.addEventListener('click', () => {
                const basePath = this.getBasePath();
                window.location.href = `${basePath}pages/add-recipe.html`;
            });
        }
        this.updateActiveLink();
    }

    updateActiveLink() {
        const currentPath = window.location.pathname;
        const links = this.shadowRoot.querySelectorAll('.nav-link');
        const basePath = this.getBasePath(); // –ü–æ–ª—É—á–∞–µ–º basePath –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è

        links.forEach(link => {
            link.classList.remove('active');
            // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º href –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è (—É–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ './' –∏–ª–∏ '../')
            const linkHref = new URL(link.getAttribute('href'), document.baseURI).pathname;
            const targetPath = new URL(basePath + link.getAttribute('href').replace(/^\.\//, ''), document.baseURI).pathname;
            
            // –ë–æ–ª–µ–µ —Ç–æ—á–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—É—Ç–µ–π
            if (currentPath === linkHref || currentPath === targetPath || (currentPath === '/' && (linkHref === '/index.html' || targetPath === '/index.html'))) {
                 link.classList.add('active');
            }
        });
    }

    setupUserCounter() {
        const storedUsers = localStorage.getItem('activeUsers');
        if (storedUsers) {
            this.activeUsers = parseInt(storedUsers, 10); // –£—Ç–æ—á–Ω—è–µ–º —Å–∏—Å—Ç–µ–º—É —Å—á–∏—Å–ª–µ–Ω–∏—è
        }

        this.sessionId = Math.random().toString(36).substring(2, 15);
        this.registerUser();
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞, —á—Ç–æ–±—ã –µ–≥–æ –º–æ–∂–Ω–æ –±—ã–ª–æ –æ—á–∏—Å—Ç–∏—Ç—å
        this.userCountIntervalId = setInterval(() => this.updateUserCount(), 30000);

        window.addEventListener('beforeunload', () => {
            this.unregisterUser();
        });
    }

    registerUser() {
        const now = Date.now();
        const sessions = JSON.parse(localStorage.getItem('userSessions') || '{}');
        
        Object.keys(sessions).forEach(id => {
            if (now - sessions[id] > 120000) { // 2 –º–∏–Ω—É—Ç—ã
                delete sessions[id];
            }
        });
        
        sessions[this.sessionId] = now;
        localStorage.setItem('userSessions', JSON.stringify(sessions));
        this.updateUserCount();
    }

    unregisterUser() {
        const sessions = JSON.parse(localStorage.getItem('userSessions') || '{}');
        delete sessions[this.sessionId];
        localStorage.setItem('userSessions', JSON.stringify(sessions));
        // –ù–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤—ã–∑—ã–≤–∞—Ç—å updateUserCount –∑–¥–µ—Å—å, —Ç–∞–∫ –∫–∞–∫ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è
    }

    updateUserCount() {
        const sessions = JSON.parse(localStorage.getItem('userSessions') || '{}');
        const now = Date.now();
        
        const activeCount = Object.values(sessions).filter(timestamp => 
            now - timestamp < 120000 // 2 –º–∏–Ω—É—Ç—ã
        ).length;

        this.activeUsers = activeCount;
        localStorage.setItem('activeUsers', activeCount.toString());
        
        const userCountElement = this.shadowRoot.querySelector('.user-count');
        if (userCountElement) {
            userCountElement.textContent = this.activeUsers;
        }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º disconnectedCallback –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
    disconnectedCallback() {
        if (this.clockIntervalId) {
            clearInterval(this.clockIntervalId);
        }
        if (this.userCountIntervalId) {
            clearInterval(this.userCountIntervalId);
        }
        // –ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ –¥—Ä—É–≥—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –±–µ–∑ –ø–æ–ª–Ω–æ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏)
        // —Å—Ç–æ–∏—Ç –æ—Ç—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ beforeunload
        // this.unregisterUser(); // –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ, –µ—Å–ª–∏ 'beforeunload' –Ω–µ –≤—Å–µ–≥–¥–∞ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç
    }
}

customElements.define('header-component', HeaderComponent);